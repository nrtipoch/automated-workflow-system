# ===== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á server.js ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ =====

cat > server.js << 'EOF'
const express = require('express');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(express.static('public'));

// ‡∏™‡∏£‡πâ‡∏≤‡∏á public directory ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
if (!fs.existsSync('public')) {
  fs.mkdirSync('public', { recursive: true });
  console.log('‚úÖ Created public directory');
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á index.html
const createIndexHtml = () => {
  const indexPath = path.join(__dirname, 'public', 'index.html');
  const html = `<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Automated Workflow System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .main-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            margin: 2rem auto;
            max-width: 1200px;
            padding: 0;
        }
        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 2rem;
            border-radius: 20px 20px 0 0;
            text-align: center;
        }
        .card {
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin: 1rem 0;
        }
        .btn-primary {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            border: none;
            border-radius: 25px;
        }
        .success-indicator {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
            padding: 15px;
            border-radius: 10px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="main-container">
            <div class="header">
                <h1><i class="fas fa-robot"></i> Automated Workflow System</h1>
                <p class="mb-0">‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ AI</p>
                <small>üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!</small>
            </div>

            <div class="p-4">
                <div class="success-indicator">
                    <h5>‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h5>
                    <ul class="mb-0">
                        <li>‚úÖ package.json ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß</li>
                        <li>‚úÖ Dependencies ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</li>
                        <li>‚úÖ Express Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</li>
                        <li>‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß</li>
                    </ul>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title"><i class="fas fa-edit"></i> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà</h5>
                        <form id="workflowForm">
                            <div class="mb-3">
                                <label for="title" class="form-label">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á</label>
                                <input type="text" class="form-control" id="title" name="title" required>
                            </div>
                            
                            <div class="mb-3">
                                <label for="content" class="form-label">‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ</label>
                                <textarea class="form-control" id="content" name="content" rows="4" required></textarea>
                            </div>
                            
                            <div class="mb-3">
                                <label for="customEnding" class="form-label">‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
                                <input type="text" class="form-control" id="customEnding" name="customEnding">
                            </div>
                            
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-play"></i> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• (Demo)
                            </button>
                        </form>
                    </div>
                </div>

                <div id="results" class="card" style="display: none;">
                    <div class="card-body">
                        <h5 class="card-title"><i class="fas fa-check-circle text-success"></i> ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</h5>
                        <div id="resultsContent"></div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title"><i class="fas fa-info-circle"></i> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h5>
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Status:</strong> <span class="badge bg-success">Online</span></p>
                                <p><strong>Port:</strong> ${PORT}</p>
                                <p><strong>Node.js:</strong> ${process.version}</p>
                            </div>
                            <div class="col-md-6">
                                <p><strong>API Endpoints:</strong></p>
                                <ul>
                                    <li><a href="/health" target="_blank">GET /health</a></li>
                                    <li><a href="/api/test" target="_blank">GET /api/test</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.getElementById('workflowForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const title = document.getElementById('title').value;
            const content = document.getElementById('content').value;
            const customEnding = document.getElementById('customEnding').value;
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå demo
            document.getElementById('results').style.display = 'block';
            document.getElementById('resultsContent').innerHTML = \`
                <div class="alert alert-success">
                    <h6>Demo Mode - ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h6>
                    <p><strong>‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:</strong> \${title}</p>
                    <p><strong>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö:</strong> \${content.substring(0, 100)}...</p>
                    <p><strong>‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢:</strong> \${customEnding || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}</p>
                    <p><strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:</strong> \${new Date().toLocaleString('th-TH')}</p>
                </div>
                <div class="row">
                    <div class="col-md-3">
                        <div class="card border-primary">
                            <div class="card-body text-center">
                                <i class="fas fa-file-alt fa-2x text-primary"></i>
                                <h6 class="mt-2">AI ‡∏™‡∏£‡∏∏‡∏õ</h6>
                                <small>‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-success">
                            <div class="card-body text-center">
                                <i class="fas fa-volume-up fa-2x text-success"></i>
                                <h6 class="mt-2">‡πÄ‡∏™‡∏µ‡∏¢‡∏á</h6>
                                <small>‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-warning">
                            <div class="card-body text-center">
                                <i class="fas fa-video fa-2x text-warning"></i>
                                <h6 class="mt-2">‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</h6>
                                <small>‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-danger">
                            <div class="card-body text-center">
                                <i class="fab fa-youtube fa-2x text-danger"></i>
                                <h6 class="mt-2">YouTube</h6>
                                <small>‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</small>
                            </div>
                        </div>
                    </div>
                </div>
            \`;
            
            // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            document.getElementById('results').scrollIntoView({ behavior: 'smooth' });
        });

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
        fetch('/health')
            .then(response => response.json())
            .then(data => console.log('Health check:', data))
            .catch(error => console.error('Health check failed:', error));
    </script>
</body>
</html>`;
  
  fs.writeFileSync(indexPath, html);
  console.log('‚úÖ Created index.html');
};

// Routes
app.get('/', (req, res) => {
  createIndexHtml();
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    port: PORT,
    nodeVersion: process.version,
    uptime: Math.floor(process.uptime()),
    message: 'Automated Workflow System is running successfully!'
  });
});

app.get('/api/test', (req, res) => {
  res.json({
    success: true,
    message: 'API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
    timestamp: new Date().toISOString(),
    endpoint: '/api/test'
  });
});

app.post('/api/process-workflow', (req, res) => {
  const { title, content, customEnding } = req.body;
  
  res.json({
    success: true,
    message: 'Workflow processed successfully (Demo Mode)',
    data: {
      id: 'demo_' + Date.now(),
      title,
      content: content.substring(0, 200) + '...',
      customEnding,
      timestamp: new Date().toISOString(),
      status: 'completed'
    }
  });
});

// Error handling
app.use((req, res) => {
  res.status(404).json({
    error: 'Page not found',
    path: req.url,
    message: 'The requested resource was not found on this server.'
  });
});

// Start server
app.listen(PORT, () => {
  console.log('üöÄ Automated Workflow System');
  console.log('===============================');
  console.log(\`üì± URL: http://localhost:\${PORT}\`);
  console.log(\`üìÅ Directory: \${__dirname}\`);
  console.log(\`üîß Node.js: \${process.version}\`);
  console.log('===============================');
  console.log('‚úÖ Server ready! Open your browser.');
  console.log('');
});
EOF

echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á server.js ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"