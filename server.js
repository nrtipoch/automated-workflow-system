// ===== Complete Automated Workflow System =====

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå server.js ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
// ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ

const express = require('express');
const path = require('path');
const fs = require('fs');

console.log('üöÄ Starting Complete Automated Workflow System...');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use(express.static('public'));

// Create directories
const createDirectories = () => {
  const dirs = ['public', 'uploads', 'outputs', 'temp', 'logs', 'data'];
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`‚úÖ Created: ${dir}/`);
    }
  });
};

// Create complete index.html
const createCompleteIndexHtml = () => {
  const indexPath = path.join(__dirname, 'public', 'index.html');
  const html = `<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Automated Workflow System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .main-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            margin: 2rem auto;
            max-width: 1200px;
        }
        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 2rem;
            border-radius: 20px 20px 0 0;
            text-align: center;
        }
        .workflow-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin: 1rem 0;
            transition: transform 0.3s ease;
        }
        .workflow-card:hover {
            transform: translateY(-5px);
        }
        .step-indicator {
            display: flex;
            justify-content: space-between;
            margin: 2rem 0;
            position: relative;
        }
        .step {
            flex: 1;
            text-align: center;
            position: relative;
        }
        .step::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 100%;
            width: 100%;
            height: 2px;
            background: #ddd;
            z-index: 1;
        }
        .step:last-child::after {
            display: none;
        }
        .step-icon {
            width: 50px;
            height: 50px;
            background: #e9ecef;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 0.5rem;
            color: #6c757d;
            font-size: 1.2rem;
            position: relative;
            z-index: 2;
            transition: all 0.3s ease;
        }
        .step.active .step-icon {
            background: #ffc107;
            color: white;
            animation: pulse 2s infinite;
        }
        .step.completed .step-icon {
            background: #28a745;
            color: white;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        .progress-bar {
            height: 10px;
            border-radius: 5px;
            overflow: hidden;
            background: #e9ecef;
            margin: 1rem 0;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4facfe 0%, #00f2fe 100%);
            transition: width 0.5s ease;
            width: 0%;
        }
        .btn-primary {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            border: none;
            border-radius: 25px;
            padding: 12px 30px;
            font-weight: 600;
        }
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .result-card {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 1rem;
            margin: 1rem 0;
        }
        .success-indicator {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="main-container">
            <div class="header">
                <h1><i class="fas fa-robot"></i> Automated Workflow System</h1>
                <p class="mb-0">‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ AI</p>
                <small>üéâ JSON Error ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</small>
            </div>

            <div class="p-4">
                <!-- Success Message -->
                <div class="success-indicator">
                    <h5><i class="fas fa-check-circle"></i> ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!</h5>
                    <ul class="mb-0">
                        <li>‚úÖ JSON Error ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</li>
                        <li>‚úÖ Express Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</li>
                        <li>‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ</li>
                        <li>‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠</li>
                    </ul>
                </div>

                <!-- Input Form -->
                <div class="workflow-card p-4 mb-4">
                    <h3><i class="fas fa-edit"></i> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà</h3>
                    <form id="workflowForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="title" class="form-label">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á</label>
                            <input type="text" class="form-control" id="title" name="title" required 
                                   placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ AI">
                        </div>
                        
                        <div class="mb-3">
                            <label for="content" class="form-label">‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ</label>
                            <textarea class="form-control" id="content" name="content" rows="6" required
                                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡∏∏‡∏õ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ ‡πÑ‡∏î‡πâ)"></textarea>
                        </div>
                        
                        <div class="mb-3">
                            <label for="customEnding" class="form-label">‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
                            <input type="text" class="form-control" id="customEnding" name="customEnding"
                                   placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ä‡∏°, ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞">
                        </div>
                        
                        <div class="mb-3">
                            <label for="logo" class="form-label">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ</label>
                            <input type="file" class="form-control" id="logo" name="logo" accept="image/*">
                            <small class="form-text text-muted">‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå JPG, PNG, GIF (‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB)</small>
                        </div>
                        
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-play"></i> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                        </button>
                    </form>
                </div>

                <!-- Progress Section -->
                <div id="progressSection" class="workflow-card p-4 mb-4" style="display: none;">
                    <h3><i class="fas fa-cogs"></i> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...</h3>
                    
                    <div class="progress-bar">
                        <div id="progressFill" class="progress-fill"></div>
                    </div>
                    
                    <div class="step-indicator">
                        <div class="step" id="step1">
                            <div class="step-icon"><i class="fas fa-brain"></i></div>
                            <small>AI ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤</small>
                        </div>
                        <div class="step" id="step2">
                            <div class="step-icon"><i class="fas fa-volume-up"></i></div>
                            <small>‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á</small>
                        </div>
                        <div class="step" id="step3">
                            <div class="step-icon"><i class="fas fa-video"></i></div>
                            <small>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</small>
                        </div>
                        <div class="step" id="step4">
                            <div class="step-icon"><i class="fab fa-youtube"></i></div>
                            <small>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î YouTube</small>
                        </div>
                    </div>
                    
                    <div id="statusMessage" class="text-center mt-3">
                        <div class="loading-spinner"></div>
                        <span class="ms-2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...</span>
                    </div>
                </div>

                <!-- Results Section -->
                <div id="resultsSection" class="workflow-card p-4 mb-4" style="display: none;">
                    <h3><i class="fas fa-check-circle text-success"></i> ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</h3>
                    <div id="resultsContent"></div>
                </div>

                <!-- History Section -->
                <div class="workflow-card p-4 mb-4">
                    <h3><i class="fas fa-history"></i> ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</h3>
                    <div id="historyContent">
                        <div class="text-center text-muted">
                            <i class="fas fa-clock fa-2x mb-2"></i>
                            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</p>
                        </div>
                    </div>
                </div>

                <!-- System Info -->
                <div class="workflow-card p-4">
                    <h3><i class="fas fa-info-circle"></i> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h3>
                    <div class="row">
                        <div class="col-md-6">
                            <h6>üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö</h6>
                            <p><strong>Status:</strong> <span class="badge bg-success">Online</span></p>
                            <p><strong>Port:</strong> ${PORT}</p>
                            <p><strong>Environment:</strong> Development</p>
                            <p><strong>Version:</strong> 1.0.0</p>
                        </div>
                        <div class="col-md-6">
                            <h6>üîó API Endpoints</h6>
                            <ul class="list-unstyled">
                                <li><a href="/" target="_blank">GET / (Homepage)</a></li>
                                <li><a href="/health" target="_blank">GET /health</a></li>
                                <li><a href="/api/test" target="_blank">GET /api/test</a></li>
                                <li>POST /api/process-workflow</li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Next Steps -->
                <div class="workflow-card p-4">
                    <h3><i class="fas fa-rocket"></i> ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ</h3>
                    <div class="row">
                        <div class="col-md-6">
                            <h6>üîß ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠</h6>
                            <ul>
                                <li>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google AI API</li>
                                <li>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Canva API</li>
                                <li>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ YouTube API</li>
                                <li>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö authentication</li>
                                <li>‡πÄ‡∏û‡∏¥‡πà‡∏° database</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>üìö ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ</h6>
                            <ul>
                                <li>‡∏®‡∏∂‡∏Å‡∏©‡∏≤ API documentation</li>
                                <li>‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå</li>
                                <li>‡∏û‡∏±‡∏í‡∏ô‡∏≤ UI/UX ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</li>
                                <li>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÜ</li>
                                <li>Deploy ‡∏Ç‡∏∂‡πâ‡∏ô production</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Form submission handler
        document.getElementById('workflowForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = {
                title: formData.get('title'),
                content: formData.get('content'),
                customEnding: formData.get('customEnding')
            };
            
            // Show progress section
            document.getElementById('progressSection').style.display = 'block';
            document.getElementById('resultsSection').style.display = 'none';
            
            // Reset progress
            updateProgress(0);
            resetSteps();
            
            try {
                // Simulate workflow steps
                await simulateWorkflow(data);
                
                // Call API
                const response = await fetch('/api/process-workflow', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showResults(result.data);
                } else {
                    showError(result.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•');
                }
                
            } catch (error) {
                showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ' + error.message);
            }
        });

        function updateProgress(percentage) {
            document.getElementById('progressFill').style.width = percentage + '%';
        }

        function resetSteps() {
            for (let i = 1; i <= 4; i++) {
                const step = document.getElementById('step' + i);
                step.classList.remove('completed', 'active');
            }
        }

        function setStepActive(stepNumber) {
            const step = document.getElementById('step' + stepNumber);
            step.classList.add('active');
        }

        function setStepCompleted(stepNumber) {
            const step = document.getElementById('step' + stepNumber);
            step.classList.remove('active');
            step.classList.add('completed');
        }

        function updateStatusMessage(message) {
            document.getElementById('statusMessage').innerHTML = 
                '<div class="loading-spinner"></div><span class="ms-2">' + message + '</span>';
        }

        async function simulateWorkflow(data) {
            const steps = [
                { step: 1, message: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ AI Gemini...', progress: 25 },
                { step: 2, message: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á...', progress: 50 },
                { step: 3, message: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Canva...', progress: 75 },
                { step: 4, message: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á YouTube...', progress: 100 }
            ];

            for (const { step, message, progress } of steps) {
                setStepActive(step);
                updateStatusMessage(message);
                updateProgress(progress);
                
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                setStepCompleted(step);
            }
        }

        function showResults(data) {
            document.getElementById('progressSection').style.display = 'none';
            document.getElementById('resultsSection').style.display = 'block';
            
            const resultsContent = document.getElementById('resultsContent');
            resultsContent.innerHTML = \`
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <div class="result-card">
                            <h6><i class="fas fa-file-alt text-primary"></i> ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡∏∏‡∏õ</h6>
                            <p>\${data.summary || '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'}</p>
                            <small class="text-muted">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥: \${data.wordCount || '150'} ‡∏Ñ‡∏≥</small>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="result-card">
                            <h6><i class="fas fa-volume-up text-success"></i> ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á</h6>
                            <p>‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>
                            <small class="text-muted">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: \${data.duration || '45'} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</small>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="result-card">
                            <h6><i class="fas fa-video text-warning"></i> ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</h6>
                            <p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>
                            <small class="text-muted">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: MP4, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: HD</small>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="result-card">
                            <h6><i class="fab fa-youtube text-danger"></i> YouTube</h6>
                            <p>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>
                            <a href="#" class="btn btn-sm btn-danger">
                                <i class="fab fa-youtube"></i> ‡∏î‡∏π‡πÉ‡∏ô YouTube
                            </a>
                        </div>
                    </div>
                </div>
                
                <div class="result-card">
                    <h6><i class="fas fa-info-circle"></i> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h6>
                    <p><strong>Workflow ID:</strong> \${data.id || 'demo_' + Date.now()}</p>
                    <p><strong>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠:</strong> \${new Date().toLocaleString('th-TH')}</p>
                    <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> <span class="badge bg-success">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</span></p>
                </div>
            \`;
            
            // Update history
            loadHistory();
        }

        function showError(error) {
            document.getElementById('progressSection').style.display = 'none';
            document.getElementById('resultsSection').style.display = 'block';
            
            const resultsContent = document.getElementById('resultsContent');
            resultsContent.innerHTML = \`
                <div class="alert alert-danger">
                    <h6><i class="fas fa-exclamation-triangle"></i> ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h6>
                    <p>\${error}</p>
                </div>
            \`;
        }

        async function loadHistory() {
            try {
                const response = await fetch('/api/workflows');
                const result = await response.json();
                
                if (result.success && result.data.length > 0) {
                    const historyContent = document.getElementById('historyContent');
                    historyContent.innerHTML = result.data.map(workflow => \`
                        <div class="card mb-2">
                            <div class="card-body">
                                <h6 class="card-title">\${workflow.title}</h6>
                                <p class="card-text small text-muted">
                                    \${new Date(workflow.timestamp).toLocaleString('th-TH')}
                                </p>
                                <span class="badge bg-success">\${workflow.status}</span>
                            </div>
                        </div>
                    \`).join('');
                }
            } catch (error) {
                console.error('Error loading history:', error);
            }
        }

        // Load history on page load
        document.addEventListener('DOMContentLoaded', () => {
            loadHistory();
            
            // Health check
            fetch('/health')
                .then(response => response.json())
                .then(data => {
                    console.log('‚úÖ System health check successful:', data);
                })
                .catch(error => {
                    console.error('‚ùå Health check failed:', error);
                });
        });
    </script>
</body>
</html>`;

  fs.writeFileSync(indexPath, html);
  console.log('‚úÖ Created complete index.html');
};

// Mock workflow processing
const processWorkflow = async (data) => {
  return {
    id: 'workflow_' + Date.now(),
    title: data.title,
    summary: `‡∏™‡∏£‡∏∏‡∏õ: ${data.content.substring(0, 100)}...`,
    wordCount: Math.floor(Math.random() * 100) + 100,
    duration: Math.floor(Math.random() * 30) + 30,
    timestamp: new Date().toISOString(),
    status: 'completed'
  };
};

// Routes
app.get('/', (req, res) => {
  createCompleteIndexHtml();
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    message: 'Automated Workflow System is running perfectly!',
    timestamp: new Date().toISOString(),
    port: PORT,
    nodeVersion: process.version,
    uptime: Math.floor(process.uptime()),
    features: {
      aiSummarization: 'ready',
      textToSpeech: 'ready', 
      videoCreation: 'ready',
      youtubeUpload: 'ready'
    }
  });
});

app.get('/api/test', (req, res) => {
  res.json({
    success: true,
    message: 'API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
    timestamp: new Date().toISOString(),
    endpoint: '/api/test'
  });
});

app.post('/api/process-workflow', async (req, res) => {
  try {
    console.log('Processing workflow:', req.body);
    
    const result = await processWorkflow(req.body);
    
    res.json({
      success: true,
      data: result,
      message: 'Workflow processed successfully (Demo Mode)'
    });
    
  } catch (error) {
    console.error('Workflow processing error:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

app.get('/api/workflows', (req, res) => {
  // Mock history data
  const mockWorkflows = [
    {
      id: 'workflow_demo_1',
      title: '‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô',
      status: 'completed',
      timestamp: new Date(Date.now() - 60000).toISOString()
    },
    {
      id: 'workflow_demo_2',
      title: '‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤',
      status: 'completed', 
      timestamp: new Date(Date.now() - 120000).toISOString()
    }
  ];
  
  res.json({
    success: true,
    data: mockWorkflows
  });
});

// Error handling
app.use((req, res) => {
  res.status(404).json({
    error: 'Page not found',
    path: req.url,
    message: 'The requested resource was not found on this server.'
  });
});

// Initialize and start server
createDirectories();

app.listen(PORT, () => {
  console.log('');
  console.log('üéâ Complete Automated Workflow System');
  console.log('========================================');
  console.log(`üì± URL: http://localhost:${PORT}`);
  console.log(`üìÅ Directory: ${__dirname}`);
  console.log(`üîß Node.js: ${process.version}`);
  console.log('========================================');
  console.log('‚úÖ System ready with all features!');
  console.log('');
  console.log('üöÄ Features Available:');
  console.log('   ‚Ä¢ AI Content Summarization (Demo)');
  console.log('   ‚Ä¢ Text-to-Speech Conversion (Demo)');
  console.log('   ‚Ä¢ Video Creation (Demo)');
  console.log('   ‚Ä¢ YouTube Upload (Demo)');
  console.log('   ‚Ä¢ Workflow Management');
  console.log('   ‚Ä¢ Progress Tracking');
  console.log('');
  console.log('üåê Open your browser to start using!');
  console.log('');
});

process.on('SIGINT', () => {
  console.log('\nüõë Shutting down Automated Workflow System...');
  console.log('üëã Thank you for using our system!');
  process.exit(0);
});